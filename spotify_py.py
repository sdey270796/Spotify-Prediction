# -*- coding: utf-8 -*-
"""spotify.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ySLx4PwngwFN2rTqL65doCoHLxG-Mopk
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
from sklearn.preprocessing import StandardScaler, OneHotEncoder

# Load the saved model
model = joblib.load('/content/dl_model.sav')

# Define a function to preprocess the user input for prediction
def preprocess_input(user_input):
    # Load the reference dataset to understand feature structure
    df = pd.read_csv("/mnt/data/Spotify Dataset.csv")

    # List the numeric and categorical columns
    numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns
    categorical_cols = df.select_dtypes(include=['object', 'bool']).columns

    # Convert the user input into a dataframe
    input_df = pd.DataFrame([user_input])

    # One-hot encoding for categorical features
    encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)
    X_encoded = pd.DataFrame(encoder.fit_transform(input_df[categorical_cols]))
    X_encoded.columns = encoder.get_feature_names_out(categorical_cols)
    X_encoded.index = input_df.index

    # Standardizing the numeric columns
    scaler = StandardScaler()
    input_df[numeric_cols] = scaler.fit_transform(input_df[numeric_cols])

    # Combine numeric and encoded categorical columns
    processed_data = pd.concat([input_df[numeric_cols], X_encoded], axis=1)

    return processed_data

# Define the Streamlit app
st.title('Spotify Popularity Prediction')

# User input for each feature
st.write("### Input the features for the song:")
duration_ms = st.number_input("Duration (ms)", min_value=0, max_value=600000, value=200000)
danceability = st.slider("Danceability", min_value=0.0, max_value=1.0, value=0.5)
energy = st.slider("Energy", min_value=0.0, max_value=1.0, value=0.5)
key = st.selectbox("Key", ['C', 'C-sharp_D-flat', 'D', 'D-sharp_E-flat', 'E', 'F', 'F-sharp_G-flat', 'G', 'G-sharp_A-flat', 'A', 'A-sharp_B-flat', 'B'])
loudness = st.number_input("Loudness (dB)", min_value=-60.0, max_value=0.0, value=-5.0)
mode = st.selectbox("Mode", ['major', 'minor'])
speechiness = st.slider("Speechiness", min_value=0.0, max_value=1.0, value=0.1)
acousticness = st.slider("Acousticness", min_value=0.0, max_value=1.0, value=0.5)
instrumentalness = st.slider("Instrumentalness", min_value=0.0, max_value=1.0, value=0.0)
liveness = st.slider("Liveness", min_value=0.0, max_value=1.0, value=0.2)
valence = st.slider("Valence", min_value=0.0, max_value=1.0, value=0.5)
tempo = st.number_input("Tempo (BPM)", min_value=0.0, max_value=250.0, value=120.0)
time_signature = st.selectbox("Time Signature", ['3/4', '4/4', '5/4', '6/4', '7/4'])

# Track genre dropdown with full list of genres
track_genre = st.selectbox("Track Genre", [
    'acoustic', 'afrobeat', 'alt-rock', 'alternative', 'ambient', 'anime', 'black-metal', 'bluegrass', 'blues', 'brazil',
    'breakbeat', 'british', 'cantopop', 'chicago-house', 'children', 'chill', 'classical', 'club', 'comedy', 'country',
    'dance', 'dancehall', 'death-metal', 'deep-house', 'detroit-techno', 'disco', 'disney', 'drum-and-bass', 'dub',
    'dubstep', 'edm', 'electro', 'electronic', 'emo', 'folk', 'forro', 'french', 'funk', 'garage', 'german', 'gospel',
    'goth', 'grindcore', 'groove', 'grunge', 'guitar', 'happy', 'hard-rock', 'hardcore', 'hardstyle', 'heavy-metal',
    'hip-hop', 'honky-tonk', 'house', 'idm', 'indian', 'indie-pop', 'indie', 'industrial', 'iranian', 'j-dance', 'j-idol',
    'j-pop', 'j-rock', 'jazz', 'k-pop', 'kids', 'latin', 'latino', 'malay', 'mandopop', 'metal', 'metalcore',
    'minimal-techno', 'mpb', 'new-age', 'opera', 'pagode', 'party', 'piano', 'pop-film', 'pop', 'power-pop',
    'progressive-house', 'psych-rock', 'punk-rock', 'punk', 'r-n-b', 'reggae', 'reggaeton', 'rock-n-roll', 'rock',
    'rockabilly', 'romance', 'sad', 'salsa', 'samba', 'sertanejo', 'show-tunes', 'singer-songwriter', 'ska', 'sleep',
    'songwriter', 'soul', 'spanish', 'study', 'swedish', 'synth-pop', 'tango', 'techno', 'trance', 'trip-hop', 'turkish',
    'world-music'
])

# Create a dictionary with user inputs
user_input = {
    'duration_ms': duration_ms,
    'danceability': danceability,
    'energy': energy,
    'key': key,
    'loudness': loudness,
    'mode': mode,
    'speechiness': speechiness,
    'acousticness': acousticness,
    'instrumentalness': instrumentalness,
    'liveness': liveness,
    'valence': valence,
    'tempo': tempo,
    'time_signature': time_signature,
    'track_genre': track_genre
}

# Predict the average popularity based on user input
if st.button('Predict Popularity'):
    processed_input = preprocess_input(user_input)
    prediction = model.predict(processed_input)

    # Display the prediction
    st.write(f"### Predicted Average Popularity: {prediction[0]}")